'use strict'
const NUN_OF_CARDS = 16;
//const COLORS = ['yellow', 'red', 'blue', 'purple', 'black', 'pink', 'orange', 'white'];
const IMAGES = ['assets/css.png', 'assets/html5.png', 'assets/javaScript.png', 'assets/mongodb.png', 'assets/nodejs.jpg', 'assets/github.jpg', 'assets/react.png', 'assets/Redux.png'];
const CARDS = [];
let cardsClicked = 1;
let cardBrother = 0;
let showAllCardFlag = false;
let timeoutID;

class Card {
    constructor(num, image, brother, visible, show) {
        this.num = num;
        this.image = image;
        this.brother = brother;
        this.visible = visible;//tell us if card on borad
        this.show = show;//tell us if if card image is shown
    }
}



const checkIfCardTaken = (cardsArray, card) => {
    for (let i = 0; i <= cardsArray.length; i++) {
        if (card === cardsArray[i])
            return true;
    }
    return false;
}
const checkIfImageTaken = (imagesArray, image) => {
    for (let i = 0; i <= imagesArray.length; i++) {
        if (image === imagesArray[i])
            return true;
    }
    return false;
}

const initCards = () => {//function that init all cards objects
    let cardsNumnersTacken = [];
    let imagesTacken = [];
    for (let i = 0; i <= (NUN_OF_CARDS / 2) - 1; i++) {
        let cardNum1 = Math.floor((Math.random() * NUN_OF_CARDS) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum1)) {
            cardNum1 = Math.floor((Math.random() * NUN_OF_CARDS) + 1);
        }
        cardsNumnersTacken[cardNum1 - 1] = cardNum1;
        let cardNum2 = Math.floor((Math.random() * NUN_OF_CARDS) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum2)) {
            cardNum2 = Math.floor((Math.random() * NUN_OF_CARDS) + 1);
        }
        cardsNumnersTacken[cardNum2 - 1] = cardNum2;
        let image = Math.floor((Math.random() * IMAGES.length));
        while (checkIfImageTaken(imagesTacken, image)) {
            image = Math.floor((Math.random() * IMAGES.length));
        }
        imagesTacken.push(image);
        CARDS[cardNum1 - 1] = new Card(cardNum1, IMAGES[image], cardNum2, true, false);
        CARDS[cardNum2 - 1] = new Card(cardNum2, IMAGES[image], cardNum1, true, false);
    }
}

const initDisplay = () => {//function that crate cards divs and render them to the DOM
    let cardsDivs = ``;
    for (let i = 0; i <= CARDS.length - 1; i++) {
        cardsDivs += `<div class="card" id=${CARDS[i].num} onClick="cardClick(this)">
        <img src=${CARDS[i].image}></div>`;
    }
    document.querySelector('.board').innerHTML = cardsDivs;
}

initCards();
initDisplay();

const reversedAllCard = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].show) {
            document.getElementById(CARDS[i].num).style.backgroundColor = 'gray';
            document.getElementById(CARDS[i].num).getElementsByTagName('img')[0].style.display = 'none';
        }
        CARDS[i].show = false;
    }
}

const showCard = (cardNum) => {
    if (cardsClicked === 3) {
        clearTimeout(timeoutID);
        reversedAllCard();
        cardsClicked = 1;
        return;
    }
    CARDS[cardNum - 1].show = true;
    document.getElementById(cardNum).getElementsByTagName('img')[0].style.display = 'initial';
    document.getElementById(cardNum).style.backgroundColor = 'white';
}

const showAllCards = () => {
    if (showAllCardFlag) {
        document.querySelector('button.show').innerHTML = 'Show All Cards';
        showAllCardFlag = false;
        reversedAllCard();
        return;
    }
    cardsClicked = 1;
    clearTimeout(timeoutID);
    for (let i = 0; i <= CARDS.length - 1; i++) {
        showCard(CARDS[i].num);
    }
    cardBrother = 0;
    document.querySelector('button.show').innerHTML = 'Hide And Continue To Play';
    showAllCardFlag = true;
}

const cardsMatch = (card1, card2) => {
    document.getElementById(card1).style.visibility = 'hidden';
    document.getElementById(card2).style.visibility = 'hidden';
    CARDS[card1 - 1].visible = false;
    CARDS[card2 - 1].visible = false;
    checkIfGameEnd();
};

const checkIfGameEnd = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].visible === true)
            return false;
    }
    document.querySelector('button.start').disabled = false;
    document.querySelector('button.show').disabled = true;
    return true;
}

const startNewGame = () => {
    /* if (showAllCardFlag)
        return;
    else
        showAllCardFlag = false;  */
    let cardsDivs = ``;
    document.querySelector('.board').innerHTML = cardsDivs;
    initCards();
    initDisplay();
    document.querySelector('button.start').disabled = true;
    document.querySelector('button.show').disabled = false;
}

function cardClick(element) {
    let cardNum = parseInt(element.id);
    if (CARDS[cardNum - 1].show)
        return;
    if (cardsClicked === 3) {
        //setTimeout(reversedAllCard, 2000);
        //reversedAllCard();
        //cardsClicked = 1;
        showCard(cardNum);
        //return;
    }
    if (cardsClicked === 2) {
        showCard(cardNum);
        if (CARDS[cardNum - 1].brother === cardBrother) {
            //cardsMatch(cardNum, cardBrother);
            //showCard(cardNum);
            setTimeout(cardsMatch, 500, cardNum, cardBrother);
            //checkIfGameEnd();
        }
        /* else{
            cardsClicked++;
            timeoutID=setTimeout(reversedAllCard, 1000);
        } */
        else
            timeoutID = setTimeout(reversedAllCard, 1000);
        cardsClicked++;
        //cardsClicked = 1;
    }
    if (cardsClicked === 1) {
        showCard(cardNum);
        cardsClicked++;
        cardBrother = cardNum;
    }
}

document.querySelector('button.start').addEventListener('click', startNewGame);
document.querySelector('button.show').addEventListener('click', showAllCards);

//////////////////////////////////////////////////////////////////////////

'use strict'
const NUN_OF_CARDS = 16;
//const COLORS = ['yellow', 'red', 'blue', 'purple', 'black', 'pink', 'orange', 'white'];
const IMAGES = ['assets/css.png', 'assets/html5.png', 'assets/javaScript.png', 'assets/mongodb.png', 'assets/nodejs.jpg', 'assets/github.jpg', 'assets/react.png', 'assets/Redux.png'];
const CARDS = [];//array of all card's objects
let cardsClicked = 1;
let prevCardNum = 0;
let showAllCardFlag = false;
let timeoutID;

class Card {
    constructor(num, image, brother, visible, show) {
        this.num = num;
        this.image = image;
        this.brother = brother;
        this.visible = visible;//indicate if card is on the game borad
        this.show = show;//indicate if card image is shown
    }
}

const checkIfCardTaken = (cardsArray, card) => {
    for (let i = 0; i <= cardsArray.length; i++) {
        if (card === cardsArray[i])
            return true;
    }
    return false;
}

const checkIfImageTaken = (imagesArray, image) => {
    for (let i = 0; i <= imagesArray.length; i++) {
        if (image === imagesArray[i])
            return true;
    }
    return false;
}

const initCards = () => {//function that init all card's objects
    let cardsNumnersTacken = [];
    let imagesTacken = [];
    for (let i = 0; i <= (NUN_OF_CARDS / 2) - 1; i++) {
        let cardNum1 = Math.floor((Math.random() * NUN_OF_CARDS) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum1)) {
            cardNum1 = Math.floor((Math.random() * NUN_OF_CARDS) + 1);
        }
        cardsNumnersTacken[cardNum1 - 1] = cardNum1;
        let cardNum2 = Math.floor((Math.random() * NUN_OF_CARDS) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum2)) {
            cardNum2 = Math.floor((Math.random() * NUN_OF_CARDS) + 1);
        }
        cardsNumnersTacken[cardNum2 - 1] = cardNum2;
        let image = Math.floor((Math.random() * IMAGES.length));
        while (checkIfImageTaken(imagesTacken, image)) {
            image = Math.floor((Math.random() * IMAGES.length));
        }
        imagesTacken.push(image);
        CARDS[cardNum1 - 1] = new Card(cardNum1, IMAGES[image], cardNum2, true, false);
        CARDS[cardNum2 - 1] = new Card(cardNum2, IMAGES[image], cardNum1, true, false);
    }
}

const initDisplay = () => {//function that crate all card's divs and render them to the DOM
    let cardsDivs = ``;
    for (let i = 0; i <= CARDS.length - 1; i++) {
        cardsDivs += `<div class="card" id=${CARDS[i].num} onClick="cardClick(this)">
        <img src=${CARDS[i].image}></div>`;
    }
    document.querySelector('.board').innerHTML = cardsDivs;
}

initCards();
initDisplay();

const reversedAllCard = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].show) {
            document.getElementById(CARDS[i].num).style.backgroundColor = 'gray';
            document.getElementById(CARDS[i].num).getElementsByTagName('img')[0].style.display = 'none';
        }
        CARDS[i].show = false;
    }
}

const showCard = (cardNum) => {
    CARDS[cardNum - 1].show = true;
    document.getElementById(cardNum).getElementsByTagName('img')[0].style.display = 'initial';
    document.getElementById(cardNum).style.backgroundColor = 'white';
}

const showAllCards = () => {
    if (showAllCardFlag) {
        document.querySelector('button.show').innerHTML = 'Show All Cards';
        showAllCardFlag = false;
        reversedAllCard();
        return;
    }
    cardsClicked = 1;
    clearTimeout(timeoutID);
    for (let i = 0; i <= CARDS.length - 1; i++) {
        showCard(CARDS[i].num);
    }
    prevCardNum = 0;
    document.querySelector('button.show').innerHTML = 'Hide And Continue To Play';
    showAllCardFlag = true;
}

const cardsMatch = (card1, card2) => {
    document.getElementById(card1).style.visibility = 'hidden';
    document.getElementById(card2).style.visibility = 'hidden';
    CARDS[card1 - 1].visible = false;
    CARDS[card2 - 1].visible = false;
    checkIfGameEnd();
};

const checkIfGameEnd = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].visible === true)
            return;
    }
    document.querySelector('button.start').disabled = false;
    document.querySelector('button.show').disabled = true;
}

const startNewGame = () => {
    document.querySelector('.board').innerHTML = ``;
    initCards();
    initDisplay();
    document.querySelector('button.start').disabled = true;
    document.querySelector('button.show').disabled = false;
}

function cardClick(element) {
    let cardNum = parseInt(element.id);
    if (CARDS[cardNum - 1].show)
        return;
    if (cardsClicked === 3) {
        clearTimeout(timeoutID);
        reversedAllCard();
        cardsClicked = 1;
    }
    if (cardsClicked === 2) {
        showCard(cardNum);
        if (CARDS[cardNum - 1].brother === prevCardNum) {
            setTimeout(cardsMatch, 500, cardNum, prevCardNum);
        }
        else
            timeoutID = setTimeout(reversedAllCard, 1000);
        cardsClicked++;
    }
    if (cardsClicked === 1) {
        showCard(cardNum);
        cardsClicked++;
        prevCardNum = cardNum;
    }
}

document.querySelector('button.start').addEventListener('click', startNewGame);
document.querySelector('button.show').addEventListener('click', showAllCards);

/////////////////////////////////////////////////////////////////////////////////////////


'use strict'
//const COLORS = ['yellow', 'red', 'blue', 'purple', 'black', 'pink', 'orange', 'white'];
const IMAGES = ['assets/css.png', 'assets/html5.png', 'assets/javaScript.png', 'assets/mongodb.png',
    'assets/nodejs.jpg', 'assets/github.jpg', 'assets/react.png', 'assets/Redux.png',
    'assets/angular.png', 'assets/firebase.png', 'assets/jquery.jpg', 'assets/mysql.png',
    'assets/npm.png', 'assets/slack.png', 'assets/vscode.png', 'assets/php.png',
    'assets/typescript.png', 'assets/chrome.jpg'];

const CARDS = [];//array of all card's objects
let numOfCards = 0;
let cardsClicked = 1;
let prevCardNum = 0;
let showAllCardFlag = false;
let timeoutID;

class Card {
    constructor(num, image, brother, visible, show) {
        this.num = num;
        this.image = image;
        this.brother = brother;
        this.visible = visible;//indicate if card is on the game borad
        this.show = show;//indicate if card image is shown
    }
}

const checkIfCardTaken = (cardsArray, card) => {
    for (let i = 0; i <= cardsArray.length; i++) {
        if (card === cardsArray[i])
            return true;
    }
    return false;
}

const checkIfImageTaken = (imagesArray, image) => {
    for (let i = 0; i <= imagesArray.length; i++) {
        if (image === imagesArray[i])
            return true;
    }
    return false;
}

const initCards = () => {//function that init all card's objects
    let cardsNumnersTacken = [];
    let imagesTacken = [];
    for (let i = 0; i <= (numOfCards / 2) - 1; i++) {
        let cardNum1 = Math.floor((Math.random() * numOfCards) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum1)) {
            cardNum1 = Math.floor((Math.random() * numOfCards) + 1);
        }
        cardsNumnersTacken[cardNum1 - 1] = cardNum1;
        let cardNum2 = Math.floor((Math.random() * numOfCards) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum2)) {
            cardNum2 = Math.floor((Math.random() * numOfCards) + 1);
        }
        cardsNumnersTacken[cardNum2 - 1] = cardNum2;
        let image = Math.floor((Math.random() * IMAGES.length));
        while (checkIfImageTaken(imagesTacken, image)) {
            image = Math.floor((Math.random() * IMAGES.length));
        }
        imagesTacken.push(image);
        CARDS[cardNum1 - 1] = new Card(cardNum1, IMAGES[image], cardNum2, true, false);
        CARDS[cardNum2 - 1] = new Card(cardNum2, IMAGES[image], cardNum1, true, false);
    }
}

const initDisplay = () => {//function that crate all card's divs and render them to the DOM
    let cardsDivs = ``;
    let boradSize = document.querySelector('main').offsetHeight;
    let cardSize = boradSize / Math.sqrt(numOfCards) - 10;
    cardSize += 'px';
    for (let i = 0; i <= CARDS.length - 1; i++) {
        cardsDivs += `<div class="card" id=${CARDS[i].num} style=" width: ${cardSize};
        height: ${cardSize};" onClick="cardClick(this)">
        <img src=${CARDS[i].image}></div>`;
    }
    document.querySelector('.board').innerHTML = cardsDivs;
}

const selectNumOfCards = () => {
    if (document.querySelector('button.start').disabled) {
        numOfCards = document.getElementById('numOfCards').value;
        document.querySelector('button.start').disabled = false;
    }
}

const reversedAllCard = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].show) {
            document.getElementById(CARDS[i].num).style.backgroundColor = 'gray';
            document.getElementById(CARDS[i].num).getElementsByTagName('img')[0].style.display = 'none';
        }
        CARDS[i].show = false;
    }
}

const showCard = (cardNum) => {
    CARDS[cardNum - 1].show = true;
    document.getElementById(cardNum).getElementsByTagName('img')[0].style.display = 'initial';
    document.getElementById(cardNum).style.backgroundColor = 'white';
}

const showAllCards = () => {
    if (showAllCardFlag) {
        document.querySelector('button.show').innerHTML = 'Show All Cards';
        showAllCardFlag = false;
        reversedAllCard();
        return;
    }
    cardsClicked = 1;
    clearTimeout(timeoutID);
    for (let i = 0; i <= CARDS.length - 1; i++) {
        showCard(CARDS[i].num);
    }
    prevCardNum = 0;
    document.querySelector('button.show').innerHTML = 'Hide And Continue To Play';
    showAllCardFlag = true;
}

const cardsMatch = (card1, card2) => {
    document.getElementById(card1).style.visibility = 'hidden';
    document.getElementById(card2).style.visibility = 'hidden';
    CARDS[card1 - 1].visible = false;
    CARDS[card2 - 1].visible = false;
    checkIfGameEnd();
};

const checkIfGameEnd = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].visible === true)
            return;
    }
    document.querySelector('button.show').disabled = true;
    document.getElementById('numOfCards').disabled = false;

}

const startNewGame = () => {
    document.querySelector('.board').innerHTML = ``;
    numOfCards = document.getElementById('numOfCards').value;
    while (CARDS.length > 0) {
        CARDS.pop();
    }
    initCards();
    initDisplay();
    document.querySelector('button.start').disabled = true;
    document.querySelector('button.show').disabled = false;
    document.getElementById('numOfCards').disabled = true;
}

function cardClick(element) {
    let cardNum = parseInt(element.id);
    if (CARDS[cardNum - 1].show)
        return;
    if (cardsClicked === 3) {
        clearTimeout(timeoutID);
        reversedAllCard();
        cardsClicked = 1;
    }
    if (cardsClicked === 2) {
        showCard(cardNum);
        if (CARDS[cardNum - 1].brother === prevCardNum) {
            setTimeout(cardsMatch, 500, cardNum, prevCardNum);
        }
        else
            timeoutID = setTimeout(reversedAllCard, 1000);
        cardsClicked++;
    }
    if (cardsClicked === 1) {
        showCard(cardNum);
        cardsClicked++;
        prevCardNum = cardNum;
    }
}

document.querySelector('button.start').addEventListener('click', startNewGame);
document.querySelector('button.show').addEventListener('click', showAllCards);
document.getElementById('numOfCards').addEventListener('click', selectNumOfCards);


//////////////////////////////////////////////////////////////

'use strict'
//const COLORS = ['yellow', 'red', 'blue', 'purple', 'black', 'pink', 'orange', 'white'];
const IMAGES = [
    'assets/css.png', 
    'assets/html5.png', 
    'assets/javaScript.png', 
    'assets/mongodb.png',
    'assets/nodejs.jpg', 
    'assets/github.jpg', 
    'assets/react.png',
    'assets/Redux.png',
    'assets/angular.png', 
    'assets/firebase.png', 
    'assets/jquery.jpg', 
    'assets/mysql.png',
    'assets/npm.png', 
    'assets/slack.png', 
    'assets/vscode.png', 
    'assets/php.png',
    'assets/typescript.png', 
    'assets/chrome.jpg'
];

const CARDS = [];//array of all card's objects
let numOfCards = 0;
let cardsClicked = 1;
let prevCardNum = 0;
let showAllCardFlag = false;
let timeoutID;

class Card {
    constructor(num, image, brother, visible, show) {
        this.num = num;
        this.image = image;
        this.brother = brother;
        this.visible = visible;//indicate if card is on the game borad
        this.show = show;//indicate if card image is shown
    }
}

const checkIfCardTaken = (cardsArray, card) => {
    for (let i = 0; i <= cardsArray.length; i++) {
        if (card === cardsArray[i])
            return true;
    }
    return false;
};

const checkIfImageTaken = (imagesArray, image) => {
    for (let i = 0; i <= imagesArray.length; i++) {
        if (image === imagesArray[i])
            return true;
    }
    return false;
};

const initCards = () => {//function that init all card's objects
    let cardsNumnersTacken = [];
    let imagesTacken = [];
    
    for (let i = 0; i <= (numOfCards / 2) - 1; i++) {
        let cardNum1 = Math.floor((Math.random() * numOfCards) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum1)) {
            cardNum1 = Math.floor((Math.random() * numOfCards) + 1);
        }
        cardsNumnersTacken[cardNum1 - 1] = cardNum1;
        let cardNum2 = Math.floor((Math.random() * numOfCards) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum2)) {
            cardNum2 = Math.floor((Math.random() * numOfCards) + 1);
        }
        cardsNumnersTacken[cardNum2 - 1] = cardNum2;

        let image = Math.floor((Math.random() * IMAGES.length));
        while (checkIfImageTaken(imagesTacken, image)) {
            image = Math.floor((Math.random() * IMAGES.length));
        }
        imagesTacken.push(image);

        CARDS[cardNum1 - 1] = new Card(cardNum1, IMAGES[image], cardNum2, true, false);
        CARDS[cardNum2 - 1] = new Card(cardNum2, IMAGES[image], cardNum1, true, false);
    }
};

const initDisplay = () => {//function that crate all card's divs and render them to the DOM
    let cardsDivs = ``;
    let boradSize = document.querySelector('main').offsetHeight;
    let cardSize = boradSize / Math.sqrt(numOfCards) - 10;
    cardSize += 'px';
    for (let i = 0; i <= CARDS.length - 1; i++) {
        cardsDivs += 
        `<div class="card" id=${CARDS[i].num} style=" width: ${cardSize}; height: ${cardSize};" onClick='cardClick(this)">
            <img src=${CARDS[i].image}>
        </div>`;
    }
    document.querySelector('.board').innerHTML = cardsDivs;
    document.querySelector('.instruction').innerHTML = 'play';
};

const selectNumOfCards = () => {
    if (document.querySelector('button.start').disabled) {
        document.querySelector('button.start').disabled = false;
    }
    else
        document.querySelector('.instruction').innerHTML = 'you can click on \"start new game\" now or you can change you choise of number of cards';
};

const reversedAllCard = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].show) {
            document.getElementById(CARDS[i].num).style.backgroundColor = 'Khaki';
            document.getElementById(CARDS[i].num).getElementsByTagName('img')[0].style.display = 'none';
        }
        CARDS[i].show = false;
    }
};

const showCard = (cardNum) => {
    CARDS[cardNum - 1].show = true;
    document.getElementById(cardNum).getElementsByTagName('img')[0].style.display = 'initial';
    document.getElementById(cardNum).style.backgroundColor = 'white';
};

const showAllCards = () => {
    if (showAllCardFlag) {
        document.querySelector('button.show').innerHTML = 'Show All Cards';
        showAllCardFlag = false;
        reversedAllCard();
        return;
    }

    //cardsClicked = 1;
    clearTimeout(timeoutID);
    for (let i = 0; i <= CARDS.length - 1; i++) {
        showCard(CARDS[i].num);
    }
    cardsClicked = 1;
    prevCardNum = 0;
    document.querySelector('button.show').innerHTML = 'Hide And Continue To Play';
    showAllCardFlag = true;
};

const cardsMatch = (card1, card2) => {
    document.getElementById(card1).style.visibility = 'hidden';
    document.getElementById(card2).style.visibility = 'hidden';
    CARDS[card1 - 1].visible = false;
    CARDS[card2 - 1].visible = false;
    checkIfGameEnd();
};

const checkIfGameEnd = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].visible === true)
            return;
    }

    document.querySelector('button.show').disabled = true;
    document.getElementById('numOfCards').disabled = false;
    document.querySelector('.instruction').innerHTML = 'you finsh the game, place chose number of card you want on the borad';

};

const startNewGame = () => {
    document.querySelector('.board').innerHTML = ``;
    numOfCards = document.getElementById('numOfCards').value;
    while (CARDS.length > 0) {
        CARDS.pop();
    }
    initCards();
    initDisplay();

    document.querySelector('button.start').disabled = true;
    document.querySelector('button.show').disabled = false;
    document.getElementById('numOfCards').disabled = true;
};

function cardClick(element) {
    let cardNum = parseInt(element.id);
    if (CARDS[cardNum - 1].show)
        return;
    if (cardsClicked === 3) {
        clearTimeout(timeoutID);
        reversedAllCard();
        cardsClicked = 1;
    }
    if (cardsClicked === 2) {
        showCard(cardNum);
        if (CARDS[cardNum - 1].brother === prevCardNum) {
            setTimeout(cardsMatch, 500, cardNum, prevCardNum);
        }
        else
            timeoutID = setTimeout(reversedAllCard, 1000);
        cardsClicked++;
    }
    if (cardsClicked === 1) {
        showCard(cardNum);
        cardsClicked++;
        prevCardNum = cardNum;
    }
}

document.querySelector('button.start').addEventListener('click', startNewGame);
document.querySelector('button.show').addEventListener('click', showAllCards);
document.getElementById('numOfCards').addEventListener('click', selectNumOfCards);


////////////////////////////////////////////////////////////////////////////


'use strict'
//const COLORS = ['yellow', 'red', 'blue', 'purple', 'black', 'pink', 'orange', 'white'];
const IMAGES = [
    'assets/css.png', 
    'assets/html5.png', 
    'assets/javaScript.png', 
    'assets/mongodb.png',
    'assets/nodejs.jpg', 
    'assets/github.jpg', 
    'assets/react.png',
    'assets/Redux.png',
    'assets/angular.png', 
    'assets/firebase.png', 
    'assets/jquery.jpg', 
    'assets/mysql.png',
    'assets/npm.png', 
    'assets/slack.png', 
    'assets/vscode.png', 
    'assets/php.png',
    'assets/typescript.png', 
    'assets/chrome.jpg'
];

const CARDS = [];//array of all card's objects
let numOfCards = 0;
let cardsClicked = 1;
let prevCardNum = 0;
let showAllCardFlag = false;
let timeoutID;

class Card {
    constructor(num, image, brother, visible, show) {
        this.num = num;
        this.image = image;
        this.brother = brother;
        this.visible = visible;//indicate if card is on the game borad
        this.show = show;//indicate if card image is shown
    }
}

const checkIfCardTaken = (cardsArray, card) => {
    for (let i = 0; i <= cardsArray.length; i++) {
        if (card === cardsArray[i])
            return true;
    }
    return false;
};

const checkIfImageTaken = (imagesArray, image) => {
    for (let i = 0; i <= imagesArray.length; i++) {
        if (image === imagesArray[i])
            return true;
    }
    return false;
};

const initCards = () => {//function that init all card's objects
    let cardsNumnersTacken = [];
    let imagesTacken = [];
    
    for (let i = 0; i <= (numOfCards / 2) - 1; i++) {
        let cardNum1 = Math.floor((Math.random() * numOfCards) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum1)) {
            cardNum1 = Math.floor((Math.random() * numOfCards) + 1);
        }
        cardsNumnersTacken[cardNum1 - 1] = cardNum1;
        let cardNum2 = Math.floor((Math.random() * numOfCards) + 1);
        while (checkIfCardTaken(cardsNumnersTacken, cardNum2)) {
            cardNum2 = Math.floor((Math.random() * numOfCards) + 1);
        }
        cardsNumnersTacken[cardNum2 - 1] = cardNum2;

        let image = Math.floor((Math.random() * IMAGES.length));
        while (checkIfImageTaken(imagesTacken, image)) {
            image = Math.floor((Math.random() * IMAGES.length));
        }
        imagesTacken.push(image);

        CARDS[cardNum1 - 1] = new Card(cardNum1, IMAGES[image], cardNum2, true, false);
        CARDS[cardNum2 - 1] = new Card(cardNum2, IMAGES[image], cardNum1, true, false);
    }
};

const initDisplay = () => {//function that crate all card's divs and render them to the DOM
    let cardsDivs = ``;
    let boradSize = document.querySelector('main').offsetHeight;
    let cardSize = boradSize / Math.sqrt(numOfCards) - 10;
    cardSize += 'px';
    for (let i = 0; i <= CARDS.length - 1; i++) {
        cardsDivs += 
        `<div class="card" id=${CARDS[i].num} style=" width: ${cardSize}; height: ${cardSize};" onClick="cardClick(this)">
            <img src=${CARDS[i].image}>
        </div>`;
    }
    document.querySelector('.board').innerHTML = cardsDivs;
    document.querySelector('.instruction').innerHTML = 'play';
};

const selectNumOfCards = () => {
    if (document.querySelector('button.start').disabled) {
        document.querySelector('button.start').disabled = false;
    }
    else
        document.querySelector('.instruction').innerHTML = 'you can click on \"start new game\" now or you can change you choise of number of cards';
};

const reversedAllCard = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].show) {
            document.getElementById(CARDS[i].num).style.backgroundColor = 'Khaki';
            document.getElementById(CARDS[i].num).getElementsByTagName('img')[0].style.display = 'none';
        }
        CARDS[i].show = false;
    }
};

const showCard = (cardNum) => {
    CARDS[cardNum - 1].show = true;
    document.getElementById(cardNum).getElementsByTagName('img')[0].style.display = 'initial';
    document.getElementById(cardNum).style.backgroundColor = 'white';
};

const showAllCards = () => {
    if (showAllCardFlag) {
        document.querySelector('button.show').innerHTML = 'Show All Cards';
        showAllCardFlag = false;
        reversedAllCard();
        return;
    }

    //cardsClicked = 1;
    clearTimeout(timeoutID);
    for (let i = 0; i <= CARDS.length - 1; i++) {
        showCard(CARDS[i].num);
    }
    cardsClicked = 1;
    prevCardNum = 0;
    document.querySelector('button.show').innerHTML = 'Hide And Continue To Play';
    showAllCardFlag = true;
};

const cardsMatch = (card1, card2) => {
    document.getElementById(card1).style.visibility = 'hidden';
    document.getElementById(card2).style.visibility = 'hidden';
    CARDS[card1 - 1].visible = false;
    CARDS[card2 - 1].visible = false;
    checkIfGameEnd();
};

const checkIfGameEnd = () => {
    for (let i = 0; i <= CARDS.length - 1; i++) {
        if (CARDS[i].visible === true)
            return;
    }

    document.querySelector('button.show').disabled = true;
    document.getElementById('numOfCards').disabled = false;
    document.querySelector('.instruction').innerHTML = 'you finsh the game, place chose number of card you want on the borad';

};

const startNewGame = () => {
    document.querySelector('.board').innerHTML = ``;
    numOfCards = document.getElementById('numOfCards').value;
    while (CARDS.length > 0) {
        CARDS.pop();
    }
    initCards();
    initDisplay();

    document.querySelector('button.start').disabled = true;
    document.querySelector('button.show').disabled = false;
    document.getElementById('numOfCards').disabled = true;
};

function cardClick(element) {
    let cardNum = parseInt(element.id);
    if (CARDS[cardNum - 1].show)
        return;
    if (cardsClicked === 3) {
        clearTimeout(timeoutID);
        reversedAllCard();
        cardsClicked = 1;
    }
    if (cardsClicked === 2) {
        showCard(cardNum);
        if (CARDS[cardNum - 1].brother === prevCardNum) {
            setTimeout(cardsMatch, 500, cardNum, prevCardNum);
        }
        else
            timeoutID = setTimeout(reversedAllCard, 1000);
        cardsClicked++;
    }
    if (cardsClicked === 1) {
        showCard(cardNum);
        cardsClicked++;
        prevCardNum = cardNum;
    }
}

document.querySelector('button.start').addEventListener('click', startNewGame);
document.querySelector('button.show').addEventListener('click', showAllCards);
document.getElementById('numOfCards').addEventListener('click', selectNumOfCards);